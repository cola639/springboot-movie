<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.gavin.movie.mapper.MovieMapper">
    <resultMap id="directorResult" type="com.gavin.movie.domain.Director">
        <id column="director_id" property="directorId"/>
        <result column="director_name" property="directorName"/>
    </resultMap>

    <resultMap id="movieResult" type="com.gavin.movie.domain.Movie">
        <id column="movie_id" property="movieId"/>
        <result column="movie_name" property="movieName"/>
        <result column="movie_description" property="movieDescription"/>
        <result column="movie_cover" property="movieCover"/>
        <result column="movie_type" property="movieType"/>
        <result column="movie_rates" property="movieRates"/>
        <result column="movie_score" property="movieScore"/>
        <result column="movie_status" property="movieStatus"/>
        <result column="movie_time" property="movieTime"/>
        <result column="movie_duration" property="movieDuration"/>
        <result column="movie_views" property="movieViews"/>
        <result column="movie_comments" property="movieComments"/>
        <result column="movie_likes" property="movieLikes"/>
        <result column="movie_dislikes" property="movieDislikes"/>
        <result column="movie_downloads" property="movieDownloads"/>
        <result column="movie_download_url" property="movieDownloadUrl"/>
        <result column="movie_download_count" property="movieDownloadCount"/>
        <result column="movie_release_time" property="movieReleaseTime"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="remarks" property="remarks"/>
        <association property="director" column="movie_director_id" javaType="com.gavin.movie.domain.Director"
                     resultMap="directorResult"/>
    </resultMap>

    <sql id="basicColumn">
        movie_id, movie_name, movie_description, movie_cover, movie_type, movie_rates,
        movie_score, movie_status, movie_time, movie_duration, movie_views,
        movie_comments, movie_likes, movie_dislikes, movie_downloads,
        movie_download_url, movie_download_count, movie_release_time,
        create_time, update_time, remarks
    </sql>

    <insert id="insertMovie" parameterType="com.gavin.movie.domain.Movie" useGeneratedKeys="true" keyProperty="movieId">
        insert into movies(
        <if test="movieName != null and movieName != ''">movie_name</if>
        )values(
        <if test="movieName != null and movieName != ''">#{movieName}</if>
        )

    </insert>


    <select id="selectAllMovie" resultMap="movieResult">
        select m.movie_id, m.movie_name, m.movie_description, m.movie_cover, m.movie_type, m.movie_rates,
        d.director_id, d.director_name
        from movies m
        left join director d on m.movie_director_id = d.director_id
        order by movie_score desc
    </select>

    <select id="selectMovieList" parameterType="com.gavin.movie.domain.Movie" resultMap="movieResult">
        select
        <include refid="basicColumn"/>
        from movies
        <where>
            <if test="movieName != null and movieName != ''">
                and movie_name like concat('%', #{movieName}, '%')
            </if>
            <if test="movieScore != null and movieScore != ''">
                and movie_score &gt;= #{movieScore}
            </if>
            <if test="movieType != null and movieType != ''">
                and movieType = #{movieType}
            </if>
        </where>
    </select>

    <select id="selectByName" resultMap="movieResult">
        select
        <include refid="basicColumn"/>
        from movies
        <where>
            <if test="movieName != null and movieName != ''">
                and movie_name like concat('%', #{movieName}, '%')
            </if>
        </where>
    </select>

    <select id="selectByScore" resultMap="movieResult">
        select
        <include refid="basicColumn"/>
        from movies
        <where>
            <if test="movieScore != null and movieScore != ''">
                and movie_score &gt;= #{movieScore}
            </if>
        </where>
    </select>

    <update id="updateMovie" parameterType="Movie">
        update movies
        <set>
            <if test="movieName != null and movieName != ''">movie_name = #{movieName},</if>
        </set>
        where movie_id = #{movieId}
    </update>

    <delete id="deleteMovieByIds" parameterType="Long">
        delete from movies
        where movie_id in
        <foreach collection="delIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>